{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/DescriptionCard.js","components/Modal.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","id","toggleModal","className","onClick","alt","src","CardList","pokemons","map","pokemon","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","DescriptionCard","data","stats","stat","index","base_stat","abilities","ability","modalRoot","document","getElementById","Modal","handleClickOutside","event","wrapperRef","contains","target","setWrapperRef","node","modal","createElement","classList","add","modalContent","appendChild","React","createRef","this","addEventListener","removeChild","removeEventListener","createPortal","ref","Component","ErrorBoundry","state","hasError","error","info","setState","connect","searchField","searchPokemons","requestPokemons","isPending","dispatch","onSearchChange","payload","value","onRequestPokemons","fetch","then","response","json","results","Promise","all","url","catch","useEffect","useState","showModal","setShowModal","selectedPokemonId","setSelectedPokemonId","selectedPokemonInfo","setSelectedPokemonInfo","filteredPokemons","filter","toLowerCase","includes","pokemonId","Boolean","window","location","hostname","match","initialStateSearch","initialStatePokemons","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.284c7625.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, id, toggleModal }) => {\n\treturn (\n\t\t<div className='tc card dib br3 pa4 ma3 grow bw2 shadow-4' onClick={() => toggleModal(id) }>\n\t\t\t<img alt='admin' src={`https://pokeres.bastionbot.org/images/pokemon/${id}.png`} />\n\t\t\t<div>\n\t\t\t\t<h2 className='ttc'>{name}</h2>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Card;","import React, {Fragment} from 'react';\nimport Card from './Card';\n\nconst CardList = ({ pokemons, toggleModal }) => {\n\treturn (\n\t\t<Fragment>\n\t\t{\n\t\t\tpokemons.map((pokemon, i) => {\n\t\t\treturn (\t\n\t\t\t\t\t<Card \n\t\t\t\t\tkey={pokemon.id} \n\t\t\t\t\tid={pokemon.id} \n\t\t\t\t\tname={pokemon.name}\n\t\t\t\t\ttoggleModal={toggleModal}\n\t\t\t\t\t/>\n\t\t\t\t\t);\t\n\t\t\t})\n\t\t}\n\t\t</Fragment>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\tclassName='pa3 br2 searchBox ba purple b--purple bg-washed-yellow'\n\t\t\ttype='search' \n\t\t\tplaceholder='search pokemons' \n\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{ overflowY: 'scroll', height: '800px' }}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;","import React from 'react';\n\nconst DescriptionCard = ({ id, data }) => {\n\treturn (\n\t\t<div className='tc descriptionCard dib br3 pa3 ma3 shadow-4'>\n\t\t\t<div className='smallCard center'>\n\t\t\t\t<img alt='admin' src={`https://pokeres.bastionbot.org/images/pokemon/${id}.png`}/>\n\t\t\t\t<h2 className='tc ttu mb0'>{data.name}</h2>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<h3 className='tc ttu'>Stats</h3>\n\t\t\t\t<table className='descriptionCardTable ttu mt1 mb3'>\n\t\t\t\t<tbody>\n\t\t\t\t{\n\t\t\t\t\tdata.stats.map((stat, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<tr key={index}>\n\t\t\t\t\t\t\t\t<td className='tl'>{stat.stat.name}:</td>\n\t\t\t\t\t\t\t\t<td className='tr'>{stat.base_stat}</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t\t<h3 className='tc ttu mt1 mb2'>Abilities</h3>\n\t\t\t\t{\n\t\t\t\t\tdata.abilities.map((ability, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<p key={index} className='ttu mt0 mb0'>{ability.ability.name}</p>\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default DescriptionCard;","import React, { Component } from 'react';\nimport { createPortal } from 'react-dom';\nimport './Modal.css';\n\nconst modalRoot = document.getElementById( 'modal' );\nclass Modal extends Component {\n    constructor() {\n      super();\n      this.modal = document.createElement( 'div' );\n      this.modal.classList.add(\"modal\");\n      this.modalContent = document.createElement( 'div' );\n      this.modalContent.classList.add(\"modal-content\");\n      this.modal.appendChild( this.modalContent );\n\n      this.wrapperRef = React.createRef();\n      // use without arrow functions only\n      // this.setWrapperRef = this.setWrapperRef.bind(this);\n      // this.handleClickOutside = this.handleClickOutside.bind(this);\n     }\n\n   componentDidMount() {\n      modalRoot.appendChild( this.modal );\n      document.addEventListener(\"mousedown\", this.handleClickOutside);\n   }\n\n   componentWillUnmount() {\n    modalRoot.removeChild( this.modal );\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n }\n\n  handleClickOutside = (event) => {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      this.props.toggleModal();\n    }\n  }\n\n    setWrapperRef = (node) => {\n      this.wrapperRef = node;\n    }\n\n    render() {\n        return createPortal(<div ref={this.setWrapperRef}>{this.props.children}</div>, this.modalContent);\n    }\n}\n\nexport default Modal;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({ hasError: true })\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Oooops. That is not good</h1>\n\t\t}\n\t\treturn this.props.children;\n\t}\n}\n\nexport default ErrorBoundry;","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport DescriptionCard from '../components/DescriptionCard';\nimport Modal from '../components/Modal';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\nimport { setSearchField, requestPokemons } from '../actions';\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tsearchField: state.searchPokemons.searchField,\n\t\tpokemons: state.requestPokemons.pokemons,\n\t\tisPending: state.requestPokemons.isPending,\n\t\terror: state.requestPokemons.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestPokemons: () => dispatch(requestPokemons()) //redux-thunk catches that this function returns a function, and gives it a dispatch parameter\n\t}\n}\n\nfunction App(props) {\n\tuseEffect(() => {\n\t\tprops.onRequestPokemons();\n\t}, [])\n\t\n\tconst [ showModal, setShowModal ] = useState(false);\n\tconst [ selectedPokemonId, setSelectedPokemonId ] = useState(null);\n\tconst [ selectedPokemonInfo, setSelectedPokemonInfo ] = useState(null);\n\n\tconst toggleModalOn = (pokemonId) => {\n\t\tfetch(`https://pokeapi.co/api/v2/pokemon/${pokemonId}`)\n\t\t.then(response => response.json())\n\t\t.then(({name, stats, abilities }) => ({name, stats, abilities }))\n\t\t.then(data => {\n\t\t\tsetSelectedPokemonId(pokemonId);\n\t\t\tsetSelectedPokemonInfo(data);\n\t\t\tsetShowModal(true);\n\t\t})\n\t}\n\t\n\tconst toggleModalOff = () => {\n\t\tsetShowModal(false);\n\t\tsetSelectedPokemonId(null);\n\t\tsetSelectedPokemonInfo(null);\n\t};\n\t\n\tconst { searchField, onSearchChange, pokemons, isPending } = props;\n\tconst filteredPokemons = pokemons.filter(pokemon => {\n\t\treturn pokemon.name.toLowerCase().includes(searchField.toLowerCase()); \n\t})\n\treturn isPending ?\n\t<h1 className='tc f1'>Loading</h1> :\n\t(\n\t\t<div className='tc'>\n\t\t\t<h1 className='f1'>Find Your PoKéFriend</h1>\n\t\t\t<SearchBox searchChange={onSearchChange} />\n\t\t\t<ErrorBoundry>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<CardList\n\t\t\t\t\t\tpokemons={filteredPokemons} \n\t\t\t\t\t\ttoggleModal={toggleModalOn} />\n\t\t\t\t</Scroll>\n\t\t\t\t{showModal &&\n\t\t\t\t\t<Modal toggleModal={toggleModalOff}>\n\t\t\t\t\t\t<DescriptionCard \n\t\t\t\t\t\t\tid={selectedPokemonId} \n\t\t\t\t\t\t\tdata={selectedPokemonInfo} />\n\t\t\t\t\t</Modal>\n\t\t\t\t}\n\t\t\t</ErrorBoundry>\n\t\t</div>\n\t) \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_POKEMONS_PENDING,\n\tREQUEST_POKEMONS_SUCCESS,\n\tREQUEST_POKEMONS_FAILED\n\t} from './constants.js';\n\nexport const setSearchField = (text) => ({\n\t\ttype: CHANGE_SEARCH_FIELD,\n\t\tpayload: text\n})\n\n// async action\nexport const requestPokemons = () => (dispatch) => {\n\tdispatch({type: REQUEST_POKEMONS_PENDING});\n\t\n\tfetch('https://pokeapi.co/api/v2/pokemon?limit=100')\n\t.then(response => response.json())\n\t.then(response => response.results)\n\t.then(pokemons => {\n\t\treturn Promise.all(pokemons.map(pokemon => {\n\t\t\treturn fetch(pokemon.url)\n\t\t\t.then(data => data.json())\n\t\t\t.then(({id, name}) => ({id, name}))\n\t\t}))\n\t})\n\t.then(data => dispatch({ type: REQUEST_POKEMONS_SUCCESS, payload: data }))\n\t.catch(error => dispatch({ type: REQUEST_POKEMONS_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_POKEMONS_PENDING = 'REQUEST_POKEMONS_PENDING';\nexport const REQUEST_POKEMONS_SUCCESS = 'REQUEST_POKEMONS_SUCCESS';\nexport const REQUEST_POKEMONS_FAILED = 'REQUEST_POKEMONS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_POKEMONS_PENDING,\n\tREQUEST_POKEMONS_SUCCESS,\n\tREQUEST_POKEMONS_FAILED\n\t} from './constants.js';\n\nconst initialStateSearch = {\n\tsearchField: ''\n}\n\nconst initialStatePokemons = {\n\tisPending: false,\n\tpokemons: [],\n\terror: ''\n}\n\nexport const searchPokemons = (state=initialStateSearch, action={}) =>{\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\n\t\tdefault:\n\t\treturn state;\n\t}\n}\n\nexport const requestPokemons = (state=initialStatePokemons, action={}) => {\n\tswitch(action.type) {\n\t\tcase REQUEST_POKEMONS_PENDING:\n\t\t\treturn Object.assign({}, state, { isPending: true })\n\t\tcase REQUEST_POKEMONS_SUCCESS:\n\t\t\treturn Object.assign({}, state, { pokemons: action.payload, isPending: false })\n\t\tcase REQUEST_POKEMONS_FAILED: \n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false })\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchPokemons, requestPokemons } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchPokemons, requestPokemons })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n\t\t\t\t<Provider store={store}>\n\t\t\t\t<App />\n\t\t\t\t</Provider>, \n\t\t\t\tdocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers:t htps://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}